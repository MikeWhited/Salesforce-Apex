public with sharing class QBRBox {
	public string searchboxstring{get; set;}
     public list<matter__c> matterz {get; set;}
     public list<ContractSpan__c> matterzStay {get; set;}
     public list<ContractSpan__c> matterz2Firm {get; set;}
     public list<ContractSpan__c> matterzLeaving {get; set;}
     public list<Cold_Storage_Date_Range__c> matterzCold {get; set;}
     public list<Contract> Subs {get; set;}
     public integer ActMatt {get; set;}
     public integer TotMatt {get; set;}
     public decimal BaseMRR {get; set;}
     public decimal XtraMRR {get; set;}
     public decimal SpanMRR {get; set;}
     public decimal NegateMRR {get; set;}
     public decimal ColdStorageMRR {get; set;}
     public decimal SubMRR {get; set;}
     public decimal FinalMRR {get; set;}
     public decimal ActiveTotal {get; set;}
     public decimal PartVaultTotal {get; set;}
     public decimal VaultTotal {get; set;}
     public decimal VaultCnt {get; set;}
     public void GrabAll(){
     Date Present = system.today();
     matterz=[select ID,Name,MonthlyMin__c,Active__c,First_Data_Set_Date__c,DeactivationDate__c, Salesperson__c,Vault_Data_Size__c,Contract__r.Price_per_GB_Cold_Storage__c,Total_Active_GB__c,Contract_Type__c, Per_GB_Price_per_Month__c, Contract_Billing_Account__c, Contract_EndUser_Account__c,Matter_EndClientAccount__c,Matter_EndClientAccount__r.name,Billing_Account2__c,Matter_End_User__c from Matter__c where Contract_Billing_Account__c like:'%'+searchboxstring+'%' AND (Num_Of_Spans__c = 0 AND ColdStorage__c =0 AND Contract_Type__c = 'Transactional')];   
     matterzStay=[select ID,Contract__r.MinimumMatterCharge__c,Name,Contract__c,Contract__r.Type__c,Contract__r.Price_Per_GB__c,matter__c,matter__r.name,matter__r.Total_Active_GB__c,matter__r.Billing_Account2__c,Contract__r.BillingAccount__c,ActiveMatter__c from ContractSpan__c where Contract__r.BillingAccount__r.Name like:'%'+searchboxstring+'%' AND (matter__r.Billing_Account2__c = :searchboxstring)];
     matterz2Firm=[select ID,Contract__r.MinimumMatterCharge__c,Name,Contract__c,Contract__r.Type__c,Contract__r.Price_Per_GB__c,matter__c,matter__r.name,matter__r.Billing_Account2__c,matter__r.Total_Active_GB__c,Contract__r.BillingAccount__c,ActiveMatter__c from ContractSpan__c where Contract__r.BillingAccount__r.Name like:'%'+searchboxstring+'%' AND (matter__r.Billing_Account2__c != :searchboxstring)];
     matterzCold=[select ID,Matter__r.MonthlyMin__c,Name,Matter__c,Begin_Date__c,End_Date__c,matter__r.name,matter__r.Billing_Account2__c,matter__r.ColdStoragePrice__c,matter__r.Total_Active_GB__c from Cold_Storage_Date_Range__c where Matter__r.Contract_Billing_Account__c like:'%'+searchboxstring+'%' AND (End_Date__c = NULL)];
     Subs=[select ID,Name, EndDate,StartDate,SubscriptionPricePerMonth__c,SubscriptionDataLimit__c from Contract where Type__c ='Subscription' AND (EndDate > :Present AND BillingAccount__r.Name like:'%'+searchboxstring+'%' )];    
        decimal BaseMRR = 0;
        decimal RealActive = 0;
        decimal VaultAndActive = 0;
        for(Matter__c matt:matterz){
            if(matt.Active__c == TRUE){
                ActMatt += 1;
                if(matt.Vault_Data_Size__c == 0){
                BaseMRR += math.max(matt.MonthlyMin__c,(matt.Total_Active_GB__c * matt.Per_GB_Price_per_Month__c));
                ActiveTotal += matt.Total_Active_GB__c;
                }
                else{
                RealActive = (matt.Total_Active_GB__c - matt.Vault_Data_Size__c);
                VaultAndActive = (RealActive * matt.Per_GB_Price_per_Month__c) + (matt.Vault_Data_Size__c * matt.Contract__r.Price_per_GB_Cold_Storage__c);
                BaseMRR += math.max(matt.MonthlyMin__c,VaultAndActive);
                ActiveTotal += RealActive;
                PartVaultTotal += matt.Vault_Data_Size__c;
                VaultCnt ++;
                RealActive = 0;
                }
            }
            else{
              TotMatt += 1;
            }
        }
//
//
//
//
        decimal XtraMRR = 0;
        for(ContractSpan__c matt2:matterzStay){
            if(matt2.ActiveMatter__c == TRUE && matt2.Contract__r.Type__c == 'Transactional'){
            ActMatt += 1;
               if(matt2.matter__r.Vault_Data_Size__c == 0){
               XtraMRR += math.max(matt2.Contract__r.MinimumMatterCharge__c,(matt2.matter__r.Total_Active_GB__c * matt2.Contract__r.Price_Per_GB__c));
               ActiveTotal += matt2.matter__r.Total_Active_GB__c;
               }
               else{
               RealActive = (matt2.matter__r.Total_Active_GB__c - matt2.matter__r.Vault_Data_Size__c);
               VaultAndActive = (RealActive * matt2.matter__r.Per_GB_Price_per_Month__c) + (matt2.matter__r.Vault_Data_Size__c * matt2.Contract__r.Price_per_GB_Cold_Storage__c);
               XtraMRR += math.max(matt2.Contract__r.MinimumMatterCharge__c,VaultAndActive);
               PartVaultTotal += matt2.matter__r.Vault_Data_Size__c;
               ActiveTotal += RealActive;
               RealActive = 0;
               }
            }
            if(matt2.ActiveMatter__c == TRUE && matt2.Contract__r.Type__c != 'Transactional'){
            ActMatt += 1;
                if(matt2.matter__r.Vault_Data_Size__c == 0){
                   ActiveTotal += matt2.matter__r.Total_Active_GB__c;
                   }
                   else{
                   RealActive = (matt2.matter__r.Total_Active_GB__c - matt2.matter__r.Vault_Data_Size__c);
                   VaultAndActive = (RealActive * matt2.matter__r.Per_GB_Price_per_Month__c) + (matt2.matter__r.Vault_Data_Size__c * matt2.Contract__r.Price_per_GB_Cold_Storage__c);
                   PartVaultTotal += matt2.matter__r.Vault_Data_Size__c;
                   ActiveTotal += RealActive;
                   RealActive = 0;
                   }
            }
            else{
            TotMatt += 1;
            }
     }
//
//
//
//
        decimal SpanMRR = 0;
        for(ContractSpan__c matt3:matterz2Firm){
            if(matt3.ActiveMatter__c == TRUE && matt3.Contract__r.Type__c == 'Transactional'){
            ActMatt += 1;
               if(matt3.matter__r.Vault_Data_Size__c == 0){
               SpanMRR += math.max(matt3.Contract__r.MinimumMatterCharge__c,(matt3.matter__r.Total_Active_GB__c * matt3.Contract__r.Price_Per_GB__c));
               }
               else{
               RealActive = (matt3.matter__r.Total_Active_GB__c - matt3.matter__r.Vault_Data_Size__c);
               VaultAndActive = (RealActive * matt3.matter__r.Per_GB_Price_per_Month__c) + (matt3.matter__r.Vault_Data_Size__c * matt3.Contract__r.Price_per_GB_Cold_Storage__c);
               SpanMRR += math.max(matt3.Contract__r.MinimumMatterCharge__c,VaultAndActive);
               PartVaultTotal += matt3.matter__r.Vault_Data_Size__c;
               ActiveTotal += RealActive;
               RealActive = 0;
               }
            }
            if(matt3.ActiveMatter__c == TRUE && matt3.Contract__r.Type__c != 'Transactional'){
            ActMatt += 1;
                if(matt3.matter__r.Vault_Data_Size__c == 0){
                   ActiveTotal += matt3.matter__r.Total_Active_GB__c;
                   }
                   else{
                   RealActive = (matt3.matter__r.Total_Active_GB__c - matt3.matter__r.Vault_Data_Size__c);
                   VaultAndActive = (RealActive * matt3.matter__r.Per_GB_Price_per_Month__c) + (matt3.matter__r.Vault_Data_Size__c * matt3.Contract__r.Price_per_GB_Cold_Storage__c);
                   PartVaultTotal += matt3.matter__r.Vault_Data_Size__c;
                   ActiveTotal += RealActive;
                   RealActive = 0;
                   }
            }
            else{
            TotMatt += 1;
            }
     }
//
//
//
//
        decimal ColdStorageMRR = 0;
        for(Cold_Storage_Date_Range__c matt4:matterzCold){
            ColdStorageMRR += math.max(matt4.Matter__r.MonthlyMin__c,(matt4.matter__r.Total_Active_GB__c * matt4.matter__r.ColdStoragePrice__c));
            PartVaultTotal += matt4.matter__r.Total_Active_GB__c;
            TotMatt += 1;
     }
//
//
//
//
        decimal SubMRR = 0;
         for(Contract con:Subs){
             SubMRR += con.SubscriptionPricePerMonth__c;
     }
//
//
//
//
     FinalMRR = (BaseMRR + XtraMRR + SpanMRR + ColdStorageMRR + SubMRR);
}
}
